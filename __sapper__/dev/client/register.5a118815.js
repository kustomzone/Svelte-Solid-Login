import { S as SvelteComponentDev, i as init, s as safe_not_equal, k as create_slot, e as element, t as text, a as space, c as claim_element, b as children, d as claim_text, f as detach, g as add_location, h as insert, j as append, l as get_slot_changes, o as get_slot_context, m as mount_component, A as svg_element, B as attr, C as listen, n as noop } from './chunk.a7e37d11.js';
import { G as GradientBackground } from './chunk.02f34370.js';

/* src/Use cases/RegisterUser/components/RegisterPanel.svelte generated by Svelte v3.4.4 */

const file = "src/Use cases/RegisterUser/components/RegisterPanel.svelte";

function create_fragment(ctx) {
	var div2, div1, h2, t0, div0, t1, em, t2, current;

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	return {
		c: function create() {
			div2 = element("div");
			div1 = element("div");
			h2 = element("h2");
			t0 = text("Select your Provider");
			div0 = element("div");
			t1 = space();

			if (!default_slot) {
				em = element("em");
				t2 = text("no content was provided");
			}

			if (default_slot) default_slot.c();
			this.h();
		},

		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			div1 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			h2 = claim_element(div1_nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t0 = claim_text(h2_nodes, "Select your Provider");
			h2_nodes.forEach(detach);

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t1 = claim_text(div2_nodes, "\n\t");

			if (!default_slot) {
				em = claim_element(div2_nodes, "EM", {}, false);
				var em_nodes = children(em);

				t2 = claim_text(em_nodes, "no content was provided");
				em_nodes.forEach(detach);
			}

			if (default_slot) default_slot.l(div2_nodes);
			div2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h2.className = "svelte-67dgs8";
			add_location(h2, file, 59, 30, 1094);
			div0.className = "progress-bar svelte-67dgs8";
			add_location(div0, file, 59, 59, 1123);
			div1.className = "panel-header svelte-67dgs8";
			add_location(div1, file, 59, 4, 1068);

			if (!default_slot) {
				add_location(em, file, 61, 2, 1172);
			}

			div2.className = "register-panel svelte-67dgs8";
			add_location(div2, file, 58, 0, 1035);
		},

		m: function mount(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, h2);
			append(h2, t0);
			append(div1, div0);
			append(div2, t1);

			if (!default_slot) {
				append(div2, em);
				append(em, t2);
			}

			else {
				default_slot.m(div2, null);
			}

			current = true;
		},

		p: function update(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}
		},

		i: function intro(local) {
			if (current) return;
			if (default_slot && default_slot.i) default_slot.i(local);
			current = true;
		},

		o: function outro(local) {
			if (default_slot && default_slot.o) default_slot.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div2);
			}

			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return { $$slots, $$scope };
}

class RegisterPanel extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

/* src/Use cases/RegisterUser/RegisterUser.svelte generated by Svelte v3.4.4 */

const file$1 = "src/Use cases/RegisterUser/RegisterUser.svelte";

// (170:1) <RegisterPanel>
function create_default_slot_1(ctx) {
	var div2, a0, t0, t1, a1, t2, t3, ul, li0, input0, t4, label0, div0, img0, span0, t5, t6, svg0, path0, t7, li1, input1, t8, label1, div1, img1, span1, t9, t10, svg1, path1, t11, div3, button, t12, dispose;

	return {
		c: function create() {
			div2 = element("div");
			a0 = element("a");
			t0 = text("What is a provider, and how should I choose one?");
			t1 = space();
			a1 = element("a");
			t2 = text("I already have a Solid identity");
			t3 = space();
			ul = element("ul");
			li0 = element("li");
			input0 = element("input");
			t4 = space();
			label0 = element("label");
			div0 = element("div");
			img0 = element("img");
			span0 = element("span");
			t5 = text("Inrupt");
			t6 = space();
			svg0 = svg_element("svg");
			path0 = svg_element("path");
			t7 = space();
			li1 = element("li");
			input1 = element("input");
			t8 = space();
			label1 = element("label");
			div1 = element("div");
			img1 = element("img");
			span1 = element("span");
			t9 = text("Solid Community");
			t10 = space();
			svg1 = svg_element("svg");
			path1 = svg_element("path");
			t11 = space();
			div3 = element("div");
			button = element("button");
			t12 = text("Next");
			this.h();
		},

		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			a0 = claim_element(div2_nodes, "A", { href: true, target: true, rel: true, class: true }, false);
			var a0_nodes = children(a0);

			t0 = claim_text(a0_nodes, "What is a provider, and how should I choose one?");
			a0_nodes.forEach(detach);
			t1 = claim_text(div2_nodes, "\n\t\t\t");

			a1 = claim_element(div2_nodes, "A", { class: true, href: true }, false);
			var a1_nodes = children(a1);

			t2 = claim_text(a1_nodes, "I already have a Solid identity");
			a1_nodes.forEach(detach);
			t3 = claim_text(div2_nodes, "\n\t\t\t");

			ul = claim_element(div2_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li0_nodes = children(li0);

			input0 = claim_element(li0_nodes, "INPUT", { type: true, name: true, id: true, value: true, class: true }, false);
			var input0_nodes = children(input0);

			input0_nodes.forEach(detach);
			t4 = claim_text(li0_nodes, "\n\t\t\t\t\t");

			label0 = claim_element(li0_nodes, "LABEL", { for: true, class: true }, false);
			var label0_nodes = children(label0);

			div0 = claim_element(label0_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			img0 = claim_element(div0_nodes, "IMG", { src: true, alt: true, class: true }, false);
			var img0_nodes = children(img0);

			img0_nodes.forEach(detach);

			span0 = claim_element(div0_nodes, "SPAN", { class: true }, false);
			var span0_nodes = children(span0);

			t5 = claim_text(span0_nodes, "Inrupt");
			span0_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t6 = claim_text(label0_nodes, "\n\t\t\t\t\t\t");

			svg0 = claim_element(label0_nodes, "svg", { "aria-hidden": true, "data-prefix": true, "data-icon": true, class: true, role: true, xmlns: true, viewBox: true }, true);
			var svg0_nodes = children(svg0);

			path0 = claim_element(svg0_nodes, "path", { fill: true, d: true }, true);
			var path0_nodes = children(path0);

			path0_nodes.forEach(detach);
			svg0_nodes.forEach(detach);
			label0_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			t7 = claim_text(ul_nodes, "\n\t\t\t\t");

			li1 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li1_nodes = children(li1);

			input1 = claim_element(li1_nodes, "INPUT", { type: true, name: true, id: true, value: true, class: true }, false);
			var input1_nodes = children(input1);

			input1_nodes.forEach(detach);
			t8 = claim_text(li1_nodes, "\n\t\t\t\t\t");

			label1 = claim_element(li1_nodes, "LABEL", { for: true, class: true }, false);
			var label1_nodes = children(label1);

			div1 = claim_element(label1_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			img1 = claim_element(div1_nodes, "IMG", { src: true, alt: true, class: true }, false);
			var img1_nodes = children(img1);

			img1_nodes.forEach(detach);

			span1 = claim_element(div1_nodes, "SPAN", { class: true }, false);
			var span1_nodes = children(span1);

			t9 = claim_text(span1_nodes, "Solid Community");
			span1_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t10 = claim_text(label1_nodes, "\n\t\t\t\t\t\t");

			svg1 = claim_element(label1_nodes, "svg", { "aria-hidden": true, "data-prefix": true, "data-icon": true, class: true, role: true, xmlns: true, viewBox: true }, true);
			var svg1_nodes = children(svg1);

			path1 = claim_element(svg1_nodes, "path", { fill: true, d: true }, true);
			var path1_nodes = children(path1);

			path1_nodes.forEach(detach);
			svg1_nodes.forEach(detach);
			label1_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			t11 = claim_text(nodes, "\n\t\t");

			div3 = claim_element(nodes, "DIV", { class: true }, false);
			var div3_nodes = children(div3);

			button = claim_element(div3_nodes, "BUTTON", { class: true }, false);
			var button_nodes = children(button);

			t12 = claim_text(button_nodes, "Next");
			button_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			a0.href = "https://solid.inrupt.com/how-it-works";
			a0.target = "_blank";
			a0.rel = "noopener noreferrer";
			a0.className = "svelte-103zy7g";
			add_location(a0, file$1, 171, 3, 2871);
			a1.className = "a-with-spacing svelte-103zy7g";
			a1.href = "/login";
			add_location(a1, file$1, 172, 3, 3017);
			attr(input0, "type", "radio");
			input0.name = "providerRadio";
			input0.id = "radio-0";
			input0.value = "https://inrupt.net/register";
			input0.className = "svelte-103zy7g";
			add_location(input0, file$1, 175, 5, 3115);
			img0.src = "inrupt.svg";
			img0.alt = "Inrupt";
			img0.className = "svelte-103zy7g";
			add_location(img0, file$1, 178, 7, 3292);
			span0.className = "label";
			add_location(span0, file$1, 178, 42, 3327);
			div0.className = "img-group svelte-103zy7g";
			add_location(div0, file$1, 177, 6, 3261);
			attr(path0, "fill", "currentColor");
			attr(path0, "d", "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z");
			add_location(path0, file$1, 181, 7, 3532);
			attr(svg0, "aria-hidden", "true");
			attr(svg0, "data-prefix", "fas");
			attr(svg0, "data-icon", "check");
			attr(svg0, "class", "checked svelte-103zy7g");
			attr(svg0, "role", "img");
			attr(svg0, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg0, "viewBox", "0 0 512 512");
			add_location(svg0, file$1, 180, 6, 3380);
			label0.htmlFor = "radio-0";
			label0.className = "provider-item svelte-103zy7g";
			add_location(label0, file$1, 176, 5, 3211);
			li0.className = "svelte-103zy7g";
			add_location(li0, file$1, 174, 4, 3105);
			attr(input1, "type", "radio");
			input1.name = "providerRadio";
			input1.id = "radio-1";
			input1.value = "https://solid.community/register";
			input1.className = "svelte-103zy7g";
			add_location(input1, file$1, 186, 5, 3896);
			img1.src = "Solid.png";
			img1.alt = "Solid Community";
			img1.className = "svelte-103zy7g";
			add_location(img1, file$1, 189, 7, 4078);
			span1.className = "label";
			add_location(span1, file$1, 189, 50, 4121);
			div1.className = "img-group svelte-103zy7g";
			add_location(div1, file$1, 188, 6, 4047);
			attr(path1, "fill", "currentColor");
			attr(path1, "d", "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z");
			add_location(path1, file$1, 192, 7, 4335);
			attr(svg1, "aria-hidden", "true");
			attr(svg1, "data-prefix", "fas");
			attr(svg1, "data-icon", "check");
			attr(svg1, "class", "checked svelte-103zy7g");
			attr(svg1, "role", "img");
			attr(svg1, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg1, "viewBox", "0 0 512 512");
			add_location(svg1, file$1, 191, 6, 4183);
			label1.htmlFor = "radio-1";
			label1.className = "provider-item svelte-103zy7g";
			add_location(label1, file$1, 187, 5, 3997);
			li1.className = "svelte-103zy7g";
			add_location(li1, file$1, 185, 4, 3886);
			ul.className = "svelte-103zy7g";
			add_location(ul, file$1, 173, 3, 3096);
			div2.className = "register-body svelte-103zy7g";
			add_location(div2, file$1, 170, 2, 2840);
			button.className = "btn-solid svelte-103zy7g";
			add_location(button, file$1, 199, 3, 4730);
			div3.className = "actions svelte-103zy7g";
			add_location(div3, file$1, 198, 2, 4705);
			dispose = listen(button, "click", ctx.handleClickNext());
		},

		m: function mount(target, anchor) {
			insert(target, div2, anchor);
			append(div2, a0);
			append(a0, t0);
			append(div2, t1);
			append(div2, a1);
			append(a1, t2);
			append(div2, t3);
			append(div2, ul);
			append(ul, li0);
			append(li0, input0);
			append(li0, t4);
			append(li0, label0);
			append(label0, div0);
			append(div0, img0);
			append(div0, span0);
			append(span0, t5);
			append(label0, t6);
			append(label0, svg0);
			append(svg0, path0);
			append(ul, t7);
			append(ul, li1);
			append(li1, input1);
			append(li1, t8);
			append(li1, label1);
			append(label1, div1);
			append(div1, img1);
			append(div1, span1);
			append(span1, t9);
			append(label1, t10);
			append(label1, svg1);
			append(svg1, path1);
			insert(target, t11, anchor);
			insert(target, div3, anchor);
			append(div3, button);
			append(button, t12);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(div2);
				detach(t11);
				detach(div3);
			}

			dispose();
		}
	};
}

// (168:0) <GradientBackground>
function create_default_slot(ctx) {
	var div, h2, t0, t1, current;

	var registerpanel = new RegisterPanel({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text("Hi! Welcome to Solid");
			t1 = space();
			registerpanel.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			h2 = claim_element(div_nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t0 = claim_text(h2_nodes, "Hi! Welcome to Solid");
			h2_nodes.forEach(detach);
			div_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n\t");
			registerpanel.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h2.className = "svelte-103zy7g";
			add_location(h2, file$1, 168, 22, 2785);
			div.className = "welcome svelte-103zy7g";
			add_location(div, file$1, 168, 1, 2764);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			append(div, h2);
			append(h2, t0);
			insert(target, t1, anchor);
			mount_component(registerpanel, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var registerpanel_changes = {};
			if (changed.$$scope) registerpanel_changes.$$scope = { changed, ctx };
			registerpanel.$set(registerpanel_changes);
		},

		i: function intro(local) {
			if (current) return;
			registerpanel.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			registerpanel.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
				detach(t1);
			}

			registerpanel.$destroy(detaching);
		}
	};
}

function create_fragment$1(ctx) {
	var current;

	var gradientbackground = new GradientBackground({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			gradientbackground.$$.fragment.c();
		},

		l: function claim(nodes) {
			gradientbackground.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(gradientbackground, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var gradientbackground_changes = {};
			if (changed.$$scope) gradientbackground_changes.$$scope = { changed, ctx };
			gradientbackground.$set(gradientbackground_changes);
		},

		i: function intro(local) {
			if (current) return;
			gradientbackground.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			gradientbackground.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			gradientbackground.$destroy(detaching);
		}
	};
}

function instance$1($$self) {
	

	const handleClickNext = () => () => {
		let el = document.querySelectorAll('input[type="radio"]:checked');
		let reg = el[0].value;
		console.log('Value', reg);
		window.location = reg + 
        "?returnToUrl=" +
        window.location.protocol +
        "//" +
        window.location.host +
        "/register/success";
	};

	return { handleClickNext };
}

class RegisterUser extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, []);
	}
}

/* src/routes/register.svelte generated by Svelte v3.4.4 */

function create_fragment$2(ctx) {
	var t, current;

	var registeruser = new RegisterUser({ $$inline: true });

	return {
		c: function create() {
			t = space();
			registeruser.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			registeruser.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "Register";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(registeruser, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			registeruser.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			registeruser.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			registeruser.$destroy(detaching);
		}
	};
}

class Register extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment$2, safe_not_equal, []);
	}
}

export default Register;

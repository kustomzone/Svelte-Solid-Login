import { S as SvelteComponentDev, i as init, s as safe_not_equal, m as mount_component, q as transition_in, r as transition_out, u as destroy_component, D as onMount, e as element, t as text, a as space, c as claim_element, b as children, d as claim_text, f as detach, g as attr, h as add_location, j as insert, k as append, w as set_data, n as noop } from './chunk.f8a05be3.js';
import { G as GradientBackground } from './chunk.27f81388.js';

/* src/Use cases/DisplayRegistrationSuccess/DisplayRegSuccess.svelte generated by Svelte v3.6.7 */

const file = "src/Use cases/DisplayRegistrationSuccess/DisplayRegSuccess.svelte";

// (63:0) <GradientBackground class="gradient-background">
function create_default_slot(ctx) {
	var h1, t0, t1, img, t2, span0, t3, t4, span2, t5, span1, t6, t7;

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Success! Welcome to the decentralized web.");
			t1 = space();
			img = element("img");
			t2 = space();
			span0 = element("span");
			t3 = text("We have emailed you more information about your new Solid Identity");
			t4 = space();
			span2 = element("span");
			t5 = text("We will redirect you so that you can now login in ");
			span1 = element("span");
			t6 = text(ctx.timeLeft);
			t7 = text(" seconds...");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Success! Welcome to the decentralized web.");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach);
			t2 = claim_text(nodes, "\n    ");

			span0 = claim_element(nodes, "SPAN", { class: true }, false);
			var span0_nodes = children(span0);

			t3 = claim_text(span0_nodes, "We have emailed you more information about your new Solid Identity");
			span0_nodes.forEach(detach);
			t4 = claim_text(nodes, "\n    ");

			span2 = claim_element(nodes, "SPAN", { class: true }, false);
			var span2_nodes = children(span2);

			t5 = claim_text(span2_nodes, "We will redirect you so that you can now login in ");

			span1 = claim_element(span2_nodes, "SPAN", { class: true }, false);
			var span1_nodes = children(span1);

			t6 = claim_text(span1_nodes, ctx.timeLeft);
			span1_nodes.forEach(detach);
			t7 = claim_text(span2_nodes, " seconds...");
			span2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(h1, "class", "svelte-17weisd");
			add_location(h1, file, 64, 4, 1110);
			attr(img, "src", "rocket.svg");
			attr(img, "alt", "rocket");
			attr(img, "class", "rocket svelte-17weisd");
			add_location(img, file, 65, 4, 1166);
			attr(span0, "class", "svelte-17weisd");
			add_location(span0, file, 66, 4, 1223);
			attr(span1, "class", "timer svelte-17weisd");
			add_location(span1, file, 67, 60, 1363);
			attr(span2, "class", "svelte-17weisd");
			add_location(span2, file, 67, 4, 1307);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, img, anchor);
			insert(target, t2, anchor);
			insert(target, span0, anchor);
			append(span0, t3);
			insert(target, t4, anchor);
			insert(target, span2, anchor);
			append(span2, t5);
			append(span2, span1);
			append(span1, t6);
			append(span2, t7);
		},

		p: function update(changed, ctx) {
			if (changed.timeLeft) {
				set_data(t6, ctx.timeLeft);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(img);
				detach(t2);
				detach(span0);
				detach(t4);
				detach(span2);
			}
		}
	};
}

function create_fragment(ctx) {
	var current;

	var gradientbackground = new GradientBackground({
		props: {
		class: "gradient-background",
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			gradientbackground.$$.fragment.c();
		},

		l: function claim(nodes) {
			gradientbackground.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(gradientbackground, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var gradientbackground_changes = {};
			if (changed.$$scope || changed.timeLeft) gradientbackground_changes.$$scope = { changed, ctx };
			gradientbackground.$set(gradientbackground_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(gradientbackground.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(gradientbackground.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(gradientbackground, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
    
    let interval;
    let timeLeft = 15;

	onMount(async () => {
        interval = setInterval(countDown, 1000);
    });
    

    const countDown = () => {
        $$invalidate('timeLeft', timeLeft -= 1); 
        if (timeLeft === 0) 
            redirect();
    };

    const redirect = async () => {
        await clearInterval(interval);
        window.location = "/login";
    };

	return { timeLeft };
}

class DisplayRegSuccess extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

/* src/routes/regsuccess.svelte generated by Svelte v3.6.7 */

function create_fragment$1(ctx) {
	var t, current;

	var displayregsuccess = new DisplayRegSuccess({ $$inline: true });

	return {
		c: function create() {
			t = space();
			displayregsuccess.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			displayregsuccess.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "Success";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(displayregsuccess, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			transition_in(displayregsuccess.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(displayregsuccess.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			destroy_component(displayregsuccess, detaching);
		}
	};
}

class Regsuccess extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment$1, safe_not_equal, []);
	}
}

export default Regsuccess;
